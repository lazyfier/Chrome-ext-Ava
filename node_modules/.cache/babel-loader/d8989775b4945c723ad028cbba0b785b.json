{"ast":null,"code":"// 加载文件\nconst filesInDirectory = dir => new Promise(resolve => dir.createReader().readEntries(entries => {\n  Promise.all(entries.filter(e => e.name[0] !== '.').map(e => e.isDirectory ? filesInDirectory(e) : new Promise(resolve => e.file(resolve)))).then(files => [].concat(...files)).then(resolve);\n})); // 遍历插件目录，读取文件信息，组合文件名称和修改时间成数据\n\n\nconst timestampForFilesInDirectory = dir => filesInDirectory(dir).then(files => files.map(f => f.name + f.lastModifiedDate).join()); // 刷新当前活动页\n\n\nconst reload = () => {\n  window.chrome.tabs.query({\n    active: true,\n    currentWindow: true\n  }, tabs => {\n    // NB: see https://github.com/xpl/crx-hotreload/issues/5\n    if (tabs[0]) {\n      window.chrome.tabs.reload(tabs[0].id);\n    } // 强制刷新页面\n\n\n    window.chrome.runtime.reload();\n  });\n}; // 观察文件改动\n\n\nconst watchChanges = (dir, lastTimestamp) => {\n  timestampForFilesInDirectory(dir).then(timestamp => {\n    // 文件没有改动则循环监听watchChanges方法\n    if (!lastTimestamp || lastTimestamp === timestamp) {\n      setTimeout(() => watchChanges(dir, timestamp), 1000); // retry after 1s\n    } else {\n      // 强制刷新页面\n      reload();\n    }\n  });\n};\n\nconst hotReload = () => {\n  window.chrome.management.getSelf(self => {\n    if (self.installType === 'development') {\n      // 获取插件目录，监听文件变化\n      window.chrome.runtime.getPackageDirectoryEntry(dir => watchChanges(dir));\n    }\n  });\n};\n\nexport default hotReload;","map":{"version":3,"sources":["/Users/wangzf/Documents/Chrome-ava/test/src/js/hotReload.js"],"names":["filesInDirectory","dir","Promise","resolve","createReader","readEntries","entries","all","filter","e","name","map","isDirectory","file","then","files","concat","timestampForFilesInDirectory","f","lastModifiedDate","join","reload","window","chrome","tabs","query","active","currentWindow","id","runtime","watchChanges","lastTimestamp","timestamp","setTimeout","hotReload","management","getSelf","self","installType","getPackageDirectoryEntry"],"mappings":"AAAA;AAEA,MAAMA,gBAAgB,GAAGC,GAAG,IAC1B,IAAIC,OAAJ,CAAYC,OAAO,IACjBF,GAAG,CAACG,YAAJ,GAAmBC,WAAnB,CAA+BC,OAAO,IAAI;AACxCJ,EAAAA,OAAO,CAACK,GAAR,CACID,OAAO,CACNE,MADD,CACQC,CAAC,IAAIA,CAAC,CAACC,IAAF,CAAO,CAAP,MAAc,GAD3B,EAECC,GAFD,CAEKF,CAAC,IACJA,CAAC,CAACG,WAAF,GAAgBZ,gBAAgB,CAACS,CAAD,CAAhC,GAAsC,IAAIP,OAAJ,CAAYC,OAAO,IAAIM,CAAC,CAACI,IAAF,CAAOV,OAAP,CAAvB,CAHxC,CADJ,EAOGW,IAPH,CAOQC,KAAK,IAAI,GAAGC,MAAH,CAAU,GAAGD,KAAb,CAPjB,EAQGD,IARH,CAQQX,OARR;AASD,CAVD,CADF,CADF,C,CAeA;;;AACA,MAAMc,4BAA4B,GAAGhB,GAAG,IACtCD,gBAAgB,CAACC,GAAD,CAAhB,CAAsBa,IAAtB,CAA2BC,KAAK,IAC9BA,KAAK,CAACJ,GAAN,CAAUO,CAAC,IAAIA,CAAC,CAACR,IAAF,GAASQ,CAAC,CAACC,gBAA1B,EAA4CC,IAA5C,EADF,CADF,C,CAKA;;;AACA,MAAMC,MAAM,GAAG,MAAM;AACnBC,EAAAA,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBC,KAAnB,CAAyB;AACrBC,IAAAA,MAAM,EAAE,IADa;AAErBC,IAAAA,aAAa,EAAE;AAFM,GAAzB,EAIEH,IAAI,IAAI;AACN;AACA,QAAIA,IAAI,CAAC,CAAD,CAAR,EAAa;AACXF,MAAAA,MAAM,CAACC,MAAP,CAAcC,IAAd,CAAmBH,MAAnB,CAA0BG,IAAI,CAAC,CAAD,CAAJ,CAAQI,EAAlC;AACD,KAJK,CAKN;;;AACAN,IAAAA,MAAM,CAACC,MAAP,CAAcM,OAAd,CAAsBR,MAAtB;AACD,GAXH;AAaD,CAdD,C,CAgBA;;;AACA,MAAMS,YAAY,GAAG,CAAC7B,GAAD,EAAM8B,aAAN,KAAwB;AAC3Cd,EAAAA,4BAA4B,CAAChB,GAAD,CAA5B,CAAkCa,IAAlC,CAAuCkB,SAAS,IAAI;AAClD;AACA,QAAI,CAACD,aAAD,IAAkBA,aAAa,KAAKC,SAAxC,EAAmD;AACjDC,MAAAA,UAAU,CAAC,MAAMH,YAAY,CAAC7B,GAAD,EAAM+B,SAAN,CAAnB,EAAqC,IAArC,CAAV,CADiD,CACK;AACvD,KAFD,MAEO;AACL;AACAX,MAAAA,MAAM;AACP;AACF,GARD;AASD,CAVD;;AAYA,MAAMa,SAAS,GAAG,MAAM;AACtBZ,EAAAA,MAAM,CAACC,MAAP,CAAcY,UAAd,CAAyBC,OAAzB,CAAiCC,IAAI,IAAI;AACvC,QAAIA,IAAI,CAACC,WAAL,KAAqB,aAAzB,EAAwC;AACtC;AACAhB,MAAAA,MAAM,CAACC,MAAP,CAAcM,OAAd,CAAsBU,wBAAtB,CAA+CtC,GAAG,IAAI6B,YAAY,CAAC7B,GAAD,CAAlE;AACD;AACF,GALD;AAMD,CAPD;;AASA,eAAeiC,SAAf","sourcesContent":["// 加载文件\n\nconst filesInDirectory = dir =>\n  new Promise(resolve =>\n    dir.createReader().readEntries(entries => {\n      Promise.all(\n          entries\n          .filter(e => e.name[0] !== '.')\n          .map(e =>\n            e.isDirectory ? filesInDirectory(e) : new Promise(resolve => e.file(resolve))\n          )\n        )\n        .then(files => [].concat(...files))\n        .then(resolve);\n    })\n  );\n\n// 遍历插件目录，读取文件信息，组合文件名称和修改时间成数据\nconst timestampForFilesInDirectory = dir =>\n  filesInDirectory(dir).then(files =>\n    files.map(f => f.name + f.lastModifiedDate).join()\n  );\n\n// 刷新当前活动页\nconst reload = () => {\n  window.chrome.tabs.query({\n      active: true,\n      currentWindow: true\n    },\n    tabs => {\n      // NB: see https://github.com/xpl/crx-hotreload/issues/5\n      if (tabs[0]) {\n        window.chrome.tabs.reload(tabs[0].id);\n      }\n      // 强制刷新页面\n      window.chrome.runtime.reload();\n    }\n  );\n};\n\n// 观察文件改动\nconst watchChanges = (dir, lastTimestamp) => {\n  timestampForFilesInDirectory(dir).then(timestamp => {\n    // 文件没有改动则循环监听watchChanges方法\n    if (!lastTimestamp || lastTimestamp === timestamp) {\n      setTimeout(() => watchChanges(dir, timestamp), 1000); // retry after 1s\n    } else {\n      // 强制刷新页面\n      reload();\n    }\n  });\n};\n\nconst hotReload = () => {\n  window.chrome.management.getSelf(self => {\n    if (self.installType === 'development') {\n      // 获取插件目录，监听文件变化\n      window.chrome.runtime.getPackageDirectoryEntry(dir => watchChanges(dir));\n    }\n  });\n};\n\nexport default hotReload;"]},"metadata":{},"sourceType":"module"}