{"ast":null,"code":"import \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.splice.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport axios from 'axios';\nexport default {\n  name: 'app',\n  data: function data() {\n    return {\n      isGif: false,\n      pngurl: 'assets/start.png',\n      gifurl: 'assets/start.gif',\n      search_mode: '历史记录',\n      search_input: '',\n      workmode: false,\n      screenshotPopover: false,\n      savedTabsGroupList: {},\n      saveTabsGroupForm: {\n        groupName: ''\n      },\n      reloadTabsGroupForm: {\n        groupName: ''\n      },\n      selectVideo: false,\n      aid: '',\n      videosData: [],\n      cid: '',\n      planDialog: false,\n      planType: '0',\n      plan: {\n        title: '',\n        type: '0',\n        startTime: new Date(),\n        items: [{\n          name: '',\n          target: 1,\n          completed: 0\n        }]\n      },\n      // item: {name: '', target: 1},\n      planList: {}\n    };\n  },\n  created: function created() {\n    this.getPlanList();\n  },\n  methods: {\n    screenshot: function screenshot() {\n      chrome.tabs.captureVisibleTab(null, {\n        format: \"png\",\n        quality: 100\n      }, function (img_url) {\n        chrome.downloads.download({\n          url: img_url,\n          saveAs: true\n        }, function (res) {\n          console.log(res);\n        });\n      });\n    },\n    getSavedTabsGroupList: function getSavedTabsGroupList() {\n      var _this = this;\n\n      chrome.storage.local.get(\"savedTabsGroupList\", function (entry) {\n        _this.savedTabsGroupList = typeof entry.savedTabsGroupList == 'undefined' ? {} : entry.savedTabsGroupList;\n      });\n    },\n    saveTabsGroup: function saveTabsGroup() {\n      var _this2 = this;\n\n      chrome.tabs.query({\n        currentWindow: true\n      }, function (tabs) {\n        var urls = tabs.map(function (tab) {\n          return tab.url;\n        });\n        _this2.savedTabsGroupList[_this2.saveTabsGroupForm.groupName] = urls;\n        chrome.storage.local.set({\n          \"savedTabsGroupList\": _this2.savedTabsGroupList\n        });\n      });\n    },\n    reloadTabsGroup: function reloadTabsGroup() {\n      var _this3 = this;\n\n      chrome.storage.local.get(\"savedTabsGroupList\", function (entry) {\n        entry.savedTabsGroupList[_this3.reloadTabsGroupForm.groupName].forEach(function (URL) {\n          chrome.tabs.create({\n            url: URL\n          });\n        });\n      });\n    },\n    deleteTabsGroup: function deleteTabsGroup() {\n      var _this4 = this;\n\n      console.log(this.savedTabsGroupList);\n      chrome.storage.local.get(\"savedTabsGroupList\", function (entry) {\n        _this4.savedTabsGroupList = typeof entry.savedTabsGroupList == 'undefined' ? {} : entry.savedTabsGroupList;\n        delete entry.savedTabsGroupList[_this4.reloadTabsGroupForm.groupName];\n        console.log(_this4.savedTabsGroupList);\n        chrome.storage.local.set({\n          \"savedTabsGroupList\": _this4.savedTabsGroupList\n        });\n      });\n    },\n    getVideoList: function getVideoList() {\n      var _this5 = this;\n\n      chrome.tabs.query({\n        currentWindow: true,\n        active: true\n      }, function (tabs) {\n        var bv = tabs[0].url.match(/[\\s\\S]*(BV[a-z|A-Z|0-9]{10})[\\s\\S]*/)[1];\n        var aidModel = \"https://api.bilibili.com/x/web-interface/archive/stat?bvid=\";\n        var cidModel = \"https://api.bilibili.com/x/player/pagelist?bvid=\";\n        var requests = [];\n        var getAid = new Promise(function (resolve) {\n          axios({\n            method: \"GET\",\n            url: aidModel + bv\n          }).then(function (res) {\n            return resolve(res);\n          });\n        });\n        requests.push(getAid);\n        var getCid = new Promise(function (resolve) {\n          axios({\n            method: \"GET\",\n            url: cidModel + bv\n          }).then(function (res) {\n            return resolve(res);\n          });\n        });\n        requests.push(getCid);\n        Promise.all(requests).then(function (replist) {\n          _this5.aid = replist[0].data.data.aid;\n          _this5.videosData = replist[1].data.data;\n        });\n      });\n    },\n    downloadBiliVideo: function downloadBiliVideo(cid) {\n      var req = \"https://api.bilibili.com/x/player/playurl?avid=\" + this.aid + \"&cid=\" + cid + \"&qn=1&type=&otype=json&platform=html5&high_quality=1\";\n      axios({\n        method: \"GET\",\n        url: req\n      }).then(function (res) {\n        var videoURL = res.data.data.durl[0].url;\n        console.log(videoURL);\n        chrome.downloads.download({\n          url: videoURL,\n          saveAs: true,\n          method: \"GET\"\n        }, function (id) {\n          chrome.downloads.onChanged.addListener(function (delta) {\n            if (delta.id == id && delta.error != \"undefined\") {\n              console.log(delta);\n              chrome.downloads.resume(id);\n            }\n          });\n        });\n      });\n    },\n    reset: function reset() {\n      chrome.storage.local.clear(function () {\n        console.log(\"clear\");\n      });\n    },\n    addPlanItem: function addPlanItem() {\n      this.plan.items.push({\n        name: '',\n        target: 1,\n        completed: 0\n      });\n    },\n    removePlanItem: function removePlanItem(index) {\n      this.plan.items.splice(index, 1);\n    },\n    addPlan: function addPlan() {\n      this.plan.type = this.planType;\n      this.plan.startTime = new Date();\n      this.planList[this.plan.title] = this.plan;\n      chrome.storage.local.set({\n        \"planList\": this.planList\n      });\n      this.plan = {\n        title: '',\n        type: '0',\n        startTime: new Date(),\n        items: [{\n          name: '',\n          target: 1,\n          completed: 0\n        }]\n      };\n      this.planDialog = false;\n      console.log(this.planList);\n    },\n    getPlanList: function getPlanList() {\n      var _this6 = this;\n\n      chrome.storage.local.get(\"planList\", function (entry) {\n        _this6.planList = typeof entry.planList == 'undefined' ? {} : entry.planList;\n      });\n    },\n    computePercentage: function computePercentage(items) {\n      var num = 0;\n      items.forEach(function (item) {\n        num += item.completed / item.target;\n      });\n      return Math.round(100 * num / items.length);\n    },\n    handlePlanChange: function handlePlanChange(items) {\n      if (this.computePercentage(items) == 100) {\n        this.showNotification(\"好好好！\");\n      }\n\n      ;\n      chrome.storage.local.set({\n        \"planList\": this.planList\n      });\n    },\n    showNotification: function showNotification(ntf) {\n      this.$notify({\n        dangerouslyUseHTMLString: true,\n        message: '<img src=\"assets/xxy.png\" alt=\"xxy\" width=\"60px\" height=\"60px\">&emsp;' + '<font size=5 color=\"#9AC8E2\">' + ntf + '</font>',\n        duration: 1000\n      });\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"module"}