{"ast":null,"code":"import _toConsumableArray from \"/Users/wangzf/Documents/Chrome-ava/test/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.array.join.js\";\n\n// 加载文件\nvar filesInDirectory = function filesInDirectory(dir) {\n  return new Promise(function (resolve) {\n    return dir.createReader().readEntries(function (entries) {\n      Promise.all(entries.filter(function (e) {\n        return e.name[0] !== '.';\n      }).map(function (e) {\n        return e.isDirectory ? filesInDirectory(e) : new Promise(function (resolve) {\n          return e.file(resolve);\n        });\n      })).then(function (files) {\n        var _ref;\n\n        return (_ref = []).concat.apply(_ref, _toConsumableArray(files));\n      }).then(resolve);\n    });\n  });\n}; // 遍历插件目录，读取文件信息，组合文件名称和修改时间成数据\n\n\nvar timestampForFilesInDirectory = function timestampForFilesInDirectory(dir) {\n  return filesInDirectory(dir).then(function (files) {\n    return files.map(function (f) {\n      return f.name + f.lastModifiedDate;\n    }).join();\n  });\n}; // 刷新当前活动页\n\n\nvar reload = function reload() {\n  window.chrome.tabs.query({\n    active: true,\n    currentWindow: true\n  }, function (tabs) {\n    // NB: see https://github.com/xpl/crx-hotreload/issues/5\n    if (tabs[0]) {\n      window.chrome.tabs.reload(tabs[0].id);\n    } // 强制刷新页面\n\n\n    window.chrome.runtime.reload();\n  });\n}; // 观察文件改动\n\n\nvar watchChanges = function watchChanges(dir, lastTimestamp) {\n  timestampForFilesInDirectory(dir).then(function (timestamp) {\n    // 文件没有改动则循环监听watchChanges方法\n    if (!lastTimestamp || lastTimestamp === timestamp) {\n      setTimeout(function () {\n        return watchChanges(dir, timestamp);\n      }, 1000); // retry after 1s\n    } else {\n      // 强制刷新页面\n      reload();\n    }\n  });\n};\n\nvar hotReload = function hotReload() {\n  window.chrome.management.getSelf(function (self) {\n    if (self.installType === 'development') {\n      // 获取插件目录，监听文件变化\n      window.chrome.runtime.getPackageDirectoryEntry(function (dir) {\n        return watchChanges(dir);\n      });\n    }\n  });\n};\n\nexport default hotReload;","map":null,"metadata":{},"sourceType":"module"}